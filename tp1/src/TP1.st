Error subclass: #CantidadHorasNegativo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Modelo-Exceptions'!!CantidadHorasNegativo commentStamp: 'LukasDAR 5/26/2020 12:36' prior: 0!Se levantará esta excepción cuando se envíe una cantidad de horas negativa para calcular la mano de obra.!Error subclass: #LitrosNegativos	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Modelo-Exceptions'!!LitrosNegativos commentStamp: 'LukasDAR 5/26/2020 12:36' prior: 0!Se levantará esta excepción cuando se envíe una cantidad de litros negativos para calcular materiales.!Error subclass: #ManoDeObraNegativa	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Modelo-Exceptions'!!ManoDeObraNegativa commentStamp: 'LukasDAR 5/26/2020 12:37' prior: 0!Se levantará esta excepción cuando se envíe el valor de la mano de obra negativo cuando se pida sumarlo junto a los materiales.!Error subclass: #ManosPincelInvalido	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Modelo-Exceptions'!!ManosPincelInvalido commentStamp: 'LukasDAR 5/26/2020 12:38' prior: 0!Se levantará esta excepción en caso de que se intente instanciar una pintura con manos cantidad de manos pincel negativas.!Error subclass: #ManosRodilloInvalido	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Modelo-Exceptions'!!ManosRodilloInvalido commentStamp: 'LukasDAR 5/26/2020 12:38' prior: 0!Se levantará esta excepción en caso de que se intente instanciar una pintura con manos cantidad de manos rodillo negativas.!Error subclass: #MaterialesNegativos	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Modelo-Exceptions'!!MaterialesNegativos commentStamp: 'LukasDAR 5/26/2020 12:37' prior: 0!Se levantará esta excepción cuando se envíe el valor de los materiales negativo cuando se pida sumarlo junto a la mano de obra.!Error subclass: #MetrosCuadradosNegativos	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Modelo-Exceptions'!!MetrosCuadradosNegativos commentStamp: 'LukasDAR 5/26/2020 12:38' prior: 0!Se levantará esta excepción cuando se envíe a calcular el presupuesto de metroscuadrados negativos.!Error subclass: #NoHayPintores	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Modelo-Exceptions'!!NoHayPintores commentStamp: 'LukasDAR 5/26/2020 12:38' prior: 0!Se levantará esta excepción cuando se intente acceder a una colección de pintores vacía.!Error subclass: #NoHayPresupuestos	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Modelo-Exceptions'!!NoHayPresupuestos commentStamp: 'LukasDAR 5/26/2020 12:39' prior: 0!Se levantará esta excepción cuando se intente obtener el presupuesto más barato de una colección de presupuestos vacía.!Error subclass: #NombreInvalido	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Modelo-Exceptions'!!NombreInvalido commentStamp: 'LukasDAR 5/26/2020 12:39' prior: 0!Se levantará esta excepción cuando se intente instanciar un objeto con nombre vacío.!Error subclass: #PrecioPorLitroNegativo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Modelo-Exceptions'!!PrecioPorLitroNegativo commentStamp: 'LukasDAR 5/26/2020 12:39' prior: 0!Se levantará esta excepción cuando se intente instanciar una pintura con precio por litro negativo, o cuando se intente crear un presupuesto con precio por litros negativos.!Error subclass: #ValorHoraNegativo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Modelo-Exceptions'!!ValorHoraNegativo commentStamp: 'LukasDAR 5/26/2020 12:39' prior: 0!Se levantará esta excepción cuando se intente instanciar un pintor con valor por hora negativo, o cuando se intente crear un presupuesto con valor por hora negativo.!Object subclass: #AlgoFix	instanceVariableNames: 'pintores'	classVariableNames: ''	package: 'TP1-Modelo-Clases'!!AlgoFix commentStamp: 'LukasDAR 5/21/2020 19:48' prior: 0!Representa una entidad que organiza pintores y calcula el presupuesto más barato.Responsabilidades: Colecciona pintores. Crea Pinturas. Se encarga de generar el presupuesto más barato entre su colección de pintores con una pintura determinada por el usuario.Public API and Key Messages- registrarPintorDePincel	Registrará a la colección de pintores un pintor de pincel.- registrarPintorDeRodillo	Registrará a la colección de pintores un pintor de rodillo.- crearPintura:	Devolverá una instancia de la clase Pintura.- presupuestoMasBaratoParaPintarMetrosCuadrados:conPintura: 	Devolverá una instancia de Presupuesto que representa el presupuesto más barato.	 	 Variables de Instancia	pintores: <OrderedCollection>!!AlgoFix methodsFor: 'initialization' stamp: 'LukasDAR 5/16/2020 01:04'!initialize	pintores := OrderedCollection new.! !!AlgoFix methodsFor: 'adding item' stamp: 'LukasDAR 5/16/2020 01:15'!registrarPintorDePincel: unNombre conValorHora: valorHora	pintores add: (PintorPincel deNombre: unNombre  conValorHora: valorHora).! !!AlgoFix methodsFor: 'adding item' stamp: 'LukasDAR 5/16/2020 01:15'!registrarPintorDeRodillo: unNombre conValorHora: unValorHora	pintores add:( PintorRodillo deNombre: unNombre conValorHora: unValorHora)! !!AlgoFix methodsFor: 'calculating' stamp: 'LukasDAR 5/19/2020 21:52'!manoDeObra: manoDeObra masMateriales: materiales	^(Presupuesto manoDeObra: manoDeObra masMateriales: materiales).! !!AlgoFix methodsFor: 'calculating' stamp: 'LukasDAR 5/23/2020 15:59'!presupuestoMasBaratoParaPintarMetrosCuadrados: metrosCuadrados conPintura: unaPintura	^(Presupuesto presupuestoMasBarato: pintores conPintura: unaPintura conMetrosCuadrados: metrosCuadrados)! !!AlgoFix methodsFor: 'constructor' stamp: 'LukasDAR 5/18/2020 01:01'!crearPintura: unNombre conPrecioPorLitro: unPrecioPorLitro manosPincel: cantidadManosPincel manosRodillo: cantidadManosRodillo.	^(Pintura conNombre: unNombre conPrecioPorLitro: unPrecioPorLitro manosPincel: cantidadManosPincel manosRodillo: cantidadManosRodillo).! !Object subclass: #PintorPincel	instanceVariableNames: 'nombre valorHora litrosPincel horas descuento'	classVariableNames: ''	package: 'TP1-Modelo-Clases'!!PintorPincel commentStamp: 'LukasDAR 5/22/2020 20:56' prior: 0!Representa una entidad de pintor que utiliza la técnica de pincel.Se comunica con la pintura mandando el mensaje específico para calcular el presupuesto con la técnica pincel.Sus colaboradores son la Pintura que recibe como parámetro y la clase Presupuesto.Public API and Key Messages- calcularManoDeObra:	Se comunica con la instancia de pintura para que calcule la mano de obra con la técnica pincel.- calcularMateriales:	Se comunica con la instancia de pintura para que calcule materiales con la técnica pincel.   	 Variables de Instancia	nombre	valorHora!!PintorPincel methodsFor: 'as yet unclassified' stamp: 'LukasDAR 5/27/2020 00:54'!aplicarDescuento: valorManoDeObra	^valorManoDeObra * descuento .! !!PintorPincel methodsFor: 'accessing' stamp: 'LukasDAR 5/18/2020 23:50'!nombre	^ nombre! !!PintorPincel methodsFor: 'calculating' stamp: 'LukasDAR 5/23/2020 16:42'!initialize	litrosPincel := 4.	horas := 2.	descuento := 0.5! !!PintorPincel methodsFor: 'calculating' stamp: 'LukasDAR 5/23/2020 19:07'!calcularMaterialesConPintura: unaPintura conMetrosCuadrados: metrosCuadrados.	^(unaPintura calcularMaterialesDePincelConMetrosCuadrados: metrosCuadrados conLitros: litrosPincel).! !!PintorPincel methodsFor: 'calculating' stamp: 'LukasDAR 5/27/2020 00:54'!calcularManoDeObraConPintura: unaPintura conMetrosCuadrados: metrosCuadrados	(metrosCuadrados > 40) ifTrue:[		^(self aplicarDescuento:(		unaPintura calcularManoDeObraDePincelConMetrosCuadrados: metrosCuadrados			conValorHora: valorHora			conHoras: horas)).	].	^(unaPintura calcularManoDeObraDePincelConMetrosCuadrados: metrosCuadrados conValorHora: valorHora conHoras: horas).! !!PintorPincel methodsFor: 'initialization - private' stamp: 'LukasDAR 5/18/2020 23:50'!conNombre: unNombre conValorHora: unValorHora	nombre := unNombre.	valorHora := unValorHora.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PintorPincel class	instanceVariableNames: ''!!PintorPincel class methodsFor: 'construction' stamp: 'LukasDAR 5/18/2020 23:51'!deNombre: unNombre conValorHora: unValorHora	|pintor|	(unValorHora < 0)ifTrue:[ValorHoraNegativo signal].	(unNombre asString isEmpty) ifTrue:[NombreInvalido signal].		pintor := self new.	pintor conNombre: unNombre conValorHora: unValorHora.	^pintor.! !Object subclass: #PintorRodillo	instanceVariableNames: 'nombre valorHora litrosRodillo horas'	classVariableNames: ''	package: 'TP1-Modelo-Clases'!!PintorRodillo commentStamp: 'LukasDAR 5/22/2020 20:55' prior: 0!Representa una entidad de pintor que utiliza la técnica de rodillo.Se comunica con la pintura mandando el mensaje específico para calcular el presupuesto con la técnica rodillo.Sus colaboradores son la Pintura que recibe como parámetro y la clase Presupuesto.Public API and Key Messages- calcularManoDeObra:	Se comunica con la instancia de pintura para que calcule la mano de obra con la técnica rodillo.- calcularMateriales:	Se comunica con la instancia de pintura para que calcule materiales con la técnica rodillo.   	 Variables de Instancia	nombre	valorHora!!PintorRodillo methodsFor: 'initialization - private' stamp: 'LukasDAR 5/18/2020 23:50'!conNombre: unNombre conValorHora: unValorHora	nombre := unNombre.	valorHora := unValorHora.! !!PintorRodillo methodsFor: 'accessing' stamp: 'LukasDAR 5/18/2020 23:50'!nombre	^ nombre! !!PintorRodillo methodsFor: 'initialization' stamp: 'LukasDAR 5/23/2020 16:42'!initialize	litrosRodillo := 5.	horas := 1! !!PintorRodillo methodsFor: 'calculating' stamp: 'LukasDAR 5/23/2020 16:47'!calcularMaterialesConPintura: unaPintura conMetrosCuadrados: metrosCuadrados.	(metrosCuadrados < 0) ifTrue:[MetrosCuadradosNegativos signal].	^(unaPintura calcularMaterialesDeRodilloConMetrosCuadrados: metrosCuadrados conLitros: litrosRodillo).! !!PintorRodillo methodsFor: 'calculating' stamp: 'LukasDAR 5/23/2020 16:43'!calcularManoDeObraConPintura: unaPintura conMetrosCuadrados: metrosCuadrados	(metrosCuadrados < 0) ifTrue:[MetrosCuadradosNegativos signal].	^(unaPintura calcularManoDeObraDeRodilloConMetrosCuadrados: metrosCuadrados conValorHora: valorHora conHoras: horas).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PintorRodillo class	instanceVariableNames: ''!!PintorRodillo class methodsFor: 'construction' stamp: 'LukasDAR 5/18/2020 23:51'!deNombre: unNombre conValorHora: unValorHora	|pintor|	(unValorHora < 0)ifTrue:[ValorHoraNegativo signal].	(unNombre asString isEmpty) ifTrue:[NombreInvalido signal].		pintor := self new.	pintor conNombre: unNombre conValorHora: unValorHora.	^pintor.! !Object subclass: #Pintura	instanceVariableNames: 'nombre precioPorLitro manosPincel manosRodillo'	classVariableNames: ''	package: 'TP1-Modelo-Clases'!!Pintura commentStamp: 'LukasDAR 5/22/2020 21:10' prior: 0!Representa la entidad pintura. Tendrá los atributos de asociados a una pintura, estos serán la cantidad de manos para la técnica de pincel, la cantidad de manos para la técnica de rodillo y el precio por litro.Tiene la 	responsabilidad de comunicarse con la clase Presupuesto brindando los datos necesarios para calcular el presupuesto respecto a la cantidad de manos necesarias dada la técnica de pincel.Public API and Key Messages- calcularManoDeObra	* Pincel:  Calcula la mano de obra con la cantidad de manos requerida por la técnica pincel.	* Rodillo: Calcula la mano de obra con la cantidad de manos requerida por la técnica rodillo.- calcularMateriales	* Pincel:  Calcula el precio de los materiales con la cantidad de manos requerida por la técnica pincel.	* Rodillo: Calcula el precio de los materiales con la cantidad de manos requerida por la técnica rodillo.	    Variables de Instancia	manosPincel	manosRodillo	nombre	precioPorLitro!!Pintura methodsFor: 'calculating' stamp: 'LukasDAR 5/23/2020 18:47'!calcularMaterialesDeRodilloConMetrosCuadrados: metrosCuadrados conLitros: litros	^((self class) calcularMaterialesConMetrosCuadrados: metrosCuadrados  conLitros: litros conPrecioPorLitros: precioPorLitro  conCantManos: manosRodillo).! !!Pintura methodsFor: 'calculating' stamp: 'LukasDAR 5/19/2020 23:16'!calcularManoDeObraDePincelConMetrosCuadrados: metrosCuadrados conValorHora: valorHora conHoras: horas	^((self class) calcularManoDeObraConMetrosCuadrados: metrosCuadrados  conValorHora: valorHora  conHoras: horas conCantidadManos: manosPincel).! !!Pintura methodsFor: 'calculating' stamp: 'LukasDAR 5/19/2020 23:16'!calcularManoDeObraDeRodilloConMetrosCuadrados: metrosCuadrados conValorHora: valorHora conHoras: horas	^((self class) calcularManoDeObraConMetrosCuadrados: metrosCuadrados  conValorHora: valorHora  conHoras: horas conCantidadManos: manosRodillo).! !!Pintura methodsFor: 'calculating' stamp: 'LukasDAR 5/19/2020 23:18'!calcularMaterialesDePincelConMetrosCuadrados: metrosCuadrados conLitros: litros 	^((self class) calcularMaterialesConMetrosCuadrados: metrosCuadrados  conLitros: litros conPrecioPorLitros: precioPorLitro  conCantManos: manosPincel).! !!Pintura methodsFor: 'initialization - private' stamp: 'LukasDAR 5/18/2020 00:26'!conNombre: unNombre conPrecioPorLitro: unPrecioPorLitro manosPincel: cantidadManosPincel manosRodillo: cantidadManosRodillonombre := unNombre.precioPorLitro := unPrecioPorLitro.manosPincel := cantidadManosPincel.manosRodillo := cantidadManosRodillo.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pintura class	instanceVariableNames: ''!!Pintura class methodsFor: 'construction' stamp: 'LukasDAR 5/18/2020 00:24'!conNombre: unNombre conPrecioPorLitro: unPrecioPorLitro manosPincel: cantidadManosPincel manosRodillo: cantidadManosRodillo 	|pintura|	(unNombre asString isEmpty) ifTrue:[ NombreInvalido signal].	(unPrecioPorLitro < 0) ifTrue:[PrecioPorLitroNegativo signal].	(cantidadManosPincel <= 0) ifTrue:[ManosPincelInvalido signal].	(cantidadManosRodillo  <= 0) ifTrue:[ManosRodilloInvalido signal].	pintura := self new.	pintura conNombre: unNombre conPrecioPorLitro: unPrecioPorLitro manosPincel: cantidadManosPincel manosRodillo: cantidadManosRodillo.	^ pintura.! !!Pintura class methodsFor: 'calculating' stamp: 'LukasDAR 5/23/2020 19:07'!calcularMaterialesConMetrosCuadrados: metrosCuadrados conLitros: litros conPrecioPorLitros: precioPorLitro conCantManos: cantManos	^(Presupuesto calcularMaterialesConMetrosCuadrados: metrosCuadrados conLitros: litros conPrecioPorLitro: precioPorLitro conManoHerramienta: cantManos).! !!Pintura class methodsFor: 'calculating' stamp: 'LukasDAR 5/23/2020 19:07'!calcularManoDeObraConMetrosCuadrados: metrosCuadrados conValorHora: valorHora conHoras: horas conCantidadManos: cantManos	^(Presupuesto calcularManoDeObraConMetrosCuadrados: metrosCuadrados conValorHora: valorHora conHoras: horas conManoHerramienta: cantManos).! !Object subclass: #Presupuesto	instanceVariableNames: 'responsable valor'	classVariableNames: ''	package: 'TP1-Modelo-Clases'!!Presupuesto commentStamp: 'LukasDAR 5/22/2020 21:18' prior: 0!La clase presupuesto es la encargada de hacer la cuenta respectiva para calcular el valor del presupuesto.Public API and Key Messages- CalcularMateriales. Realiza la cuenta para calcular los materiales.- CalcularManoDeObra. Realiza la cuenta para calcular la mano de obra.- ManoDeObraMasMateriales. Suma ambos parámetros     Variables de Instancia.	responsable: Pintor.	valor:	 Float.!!Presupuesto methodsFor: 'initialization - private' stamp: 'LukasDAR 5/22/2020 21:26'!asignarValorCon: unPintor conPintura: unaPintura conMetrosCuadrados: metrosCuadrados	valor := (self class)	manoDeObra: (self manoDeObraConResponsable: unPintor  conPintura: unaPintura conMetrosCuadrados: metrosCuadrados) 	masMateriales: (self materialesConResponsable: unPintor conPintura: unaPintura conMetrosCuadrados: metrosCuadrados).! !!Presupuesto methodsFor: 'initialization - private' stamp: 'LukasDAR 5/15/2020 13:25'!asignarResponsable: unPintor 	responsable := unPintor! !!Presupuesto methodsFor: 'calculating' stamp: 'LukasDAR 5/22/2020 21:19'!materialesConResponsable: unPintor conPintura: unaPintura conMetrosCuadrados: metrosCuadrados	^(unPintor calcularMaterialesConPintura: unaPintura conMetrosCuadrados: metrosCuadrados).! !!Presupuesto methodsFor: 'calculating' stamp: 'LukasDAR 5/22/2020 21:19'!manoDeObraConResponsable: unPintor conPintura: unaPintura conMetrosCuadrados: metrosCuadrados	^(unPintor calcularManoDeObraConPintura: unaPintura  conMetrosCuadrados: metrosCuadrados).! !!Presupuesto methodsFor: 'accesing' stamp: 'LukasDAR 5/15/2020 13:26'!valor	^ valor! !!Presupuesto methodsFor: 'accesing' stamp: 'LukasDAR 5/15/2020 13:26'!responsable	^ responsable nombre.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Presupuesto class	instanceVariableNames: 'responsable valor'!!Presupuesto class methodsFor: 'finding/searching' stamp: 'LukasDAR 5/17/2020 23:00'!masBarato: presupuestos	presupuestos ifEmpty:[ NoHayPresupuestos signal].	^presupuestos detectMin:[:presupuesto|		presupuesto valor.	].! !!Presupuesto class methodsFor: 'finding/searching' stamp: 'LukasDAR 5/23/2020 15:58'!presupuestoMasBarato: pintores conPintura: unaPintura conMetrosCuadrados: metrosCuadrados	|presupuestos|	pintores ifEmpty:[ NoHayPintores signal].	presupuestos := self presupuestosCon: pintores conPintura: unaPintura conMetrosCuadrados: metrosCuadrados.	^(self masBarato: presupuestos).! !!Presupuesto class methodsFor: 'finding/searching' stamp: 'LukasDAR 5/23/2020 15:56'!presupuestosCon: pintores conPintura: unaPintura conMetrosCuadrados: metrosCuadrados.	^(pintores collect:[:pintor| self conResponsable: pintor conPintura: unaPintura conMetrosCuadrados: metrosCuadrados]).! !!Presupuesto class methodsFor: 'construction' stamp: 'LukasDAR 5/22/2020 21:27'!conResponsable: unPintor conPintura: unaPintura conMetrosCuadrados: metrosCuadrados	|presupuesto|	presupuesto := self new.	presupuesto asignarResponsable: unPintor.	presupuesto asignarValorCon: unPintor  conPintura: unaPintura conMetrosCuadrados: metrosCuadrados .	^presupuesto.! !!Presupuesto class methodsFor: 'calculating' stamp: 'LukasDAR 5/18/2020 12:58'!manoDeObra: manoDeObra masMateriales: materiales	(manoDeObra < 0) ifTrue:[ManoDeObraNegativa signal].	(materiales < 0) ifTrue:[MaterialesNegativos signal].	^(manoDeObra + materiales).	! !!Presupuesto class methodsFor: 'calculating' stamp: 'LukasDAR 5/23/2020 19:03'!calcularManoDeObraConMetrosCuadrados: m2 conValorHora: valorHora conHoras: horas conManoHerramienta: cantManos	(m2 < 0) ifTrue: [ MetrosCuadradosNegativos signal ].	(valorHora < 0) ifTrue: [ ValorHoraNegativo signal ].	(horas < 0) ifTrue:[CantidadHorasNegativo signal].	^(m2*valorHora*horas*cantManos).! !!Presupuesto class methodsFor: 'calculating' stamp: 'LukasDAR 5/23/2020 19:04'!calcularMaterialesConMetrosCuadrados: m2 conLitros: litros conPrecioPorLitro: precioPorLitro conManoHerramienta: cantManosHerramienta	(m2 < 0) ifTrue: [ MetrosCuadradosNegativos signal ].	(litros < 0) ifTrue: [ LitrosNegativos signal ].	(precioPorLitro < 0) ifTrue:[PrecioPorLitroNegativo signal].	^(m2*litros*precioPorLitro*cantManosHerramienta).! !