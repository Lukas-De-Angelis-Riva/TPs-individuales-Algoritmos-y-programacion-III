TestCase subclass: #PruebasAlquiler	instanceVariableNames: ''	classVariableNames: ''	package: 'BikeRental-Tests'!!PruebasAlquiler methodsFor: 'tests' stamp: 'LukasDAR 6/25/2020 20:35'!test01UnAlquilerRespondeElMensajeCalcularPrecio	|alquiler bici|	bici := Bici conPrecio: 4 conPrecioPorDia: 55.	alquiler := AlquilerComun deProducto: bici conPeriodicidad: 4.	self assert: (alquiler calcularPrecio) equals:(4*55)! !!PruebasAlquiler methodsFor: 'tests' stamp: 'LukasDAR 6/25/2020 20:35'!test00UnAlquilerPeriodicoRespondeElMensajeDeConstruccion	|alquiler bici|	bici := Bici conPrecio: 4 conPrecioPorDia: 55.	alquiler := AlquilerComun deProducto: bici conPeriodicidad: 4! !TestCase subclass: #PruebasBici	instanceVariableNames: ''	classVariableNames: ''	package: 'BikeRental-Tests'!!PruebasBici methodsFor: 'tests' stamp: 'LukasDAR 6/25/2020 19:56'!test01LaBicicletaCalculaBienSuPrecioPorDia	|bici|	bici := Bici conPrecio: 3 conPrecioPorDia:5.	self assert:(bici calcularPrecioDeUso) equals: 3! !!PruebasBici methodsFor: 'tests' stamp: 'LukasDAR 6/25/2020 19:57'!test02LaBicicletaCalculaBienSuPrecioPorDia	|bici|	bici := Bici conPrecio: 10 conPrecioPorDia: 9.	self assert:(bici calcularPrecioParaDias: 4) equals: 9*4.! !!PruebasBici methodsFor: 'tests' stamp: 'LukasDAR 6/25/2020 19:32'!test00UnaBicicletaRespondeASuMensajeDeConstruccion	|bici|	bici := Bici conPrecio:3 conPrecioPorDia:50.! !TestCase subclass: #PruebasBikeRental	instanceVariableNames: ''	classVariableNames: ''	package: 'BikeRental-Tests'!!PruebasBikeRental methodsFor: 'tests' stamp: 'LukasDAR 6/25/2020 20:53'!test02AlquilerBiciPorPeriodoDe5| unaBici unAlquiler unCliente |unaBici := Bici conPrecio: 4 conPrecioPorDia: 3.unAlquiler := AlquilerComun deProducto: unaBici conPeriodicidad: 5 .unCliente := Cliente new.unCliente agregarAlquiler: unAlquiler.self assert: unCliente saldoAPagar equals: 15.! !!PruebasBikeRental methodsFor: 'tests' stamp: 'LukasDAR 6/25/2020 20:53'!test01PruebasBicicleta1| unaBici unAlquiler unCliente |unaBici := Bici conPrecio:10 conPrecioPorDia:33. "Esto es un bad smell; Sin embargo no me alcanza el tiempo a repararlo y plasmarlo en el UML""Lo que haría si tuviera un poco más de tiempo sería que exista una clase del estilo AlgoFix encargada de la Api, de manera tal que reciba como mensajes crear bicicleta, crear alquiler diario, etc."unAlquiler := AlquilerDiario deProducto: unaBici.unCliente := Cliente new.unCliente agregarAlquiler: unAlquiler.self assert: unCliente saldoAPagar equals: 10.! !